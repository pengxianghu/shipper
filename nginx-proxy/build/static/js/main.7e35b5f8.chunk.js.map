{"version":3,"sources":["CreateConsignment.js","Authenticate.js","App.js","serviceWorker.js","index.js"],"names":["CreateConsignment","state","created","description","weight","containers","consignments","create","consignment","_this","fetch","method","headers","Content-Type","body","JSON","stringify","service","request","_","omit","then","res","javascripton","setState","concat","Object","toConsumableArray","addContainer","e","target","value","setDescription","setWeight","Number","_this2","this","req","react_default","a","createElement","className","onChange","placeholder","type","onClick","length","map","item","vessel_id","id","React","Component","Authenticate","authenticated","email","password","err","login","props","onAuth","token","catch","signup","name","localStorage","setItem","setEmail","setPassword","setName","App","renderLogin","src_Authenticate","renderAuthenticated","src_CreateConsignment","getToken","getItem","isAuthenticated","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e35b5f8.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nclass CreateConsignment extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    state = {\n        created: false,\n        description: '',\n        weight: 0,\n        containers: [],\n        consignments: [],\n    }\n\n    componentWillMount() {\n        fetch(`http://www.pengxianghu.com/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                service: 'go.micro.srv.consignment',\n                method: 'ConsignmentService.Get',\n                request: {},\n            })\n        })\n        .then(req => req.javascripton())\n        .then((res) => {\n            this.setState({\n                consignments: res.consignments,\n            });\n        });\n    }\n\n    create = () => {\n        const consignment = this.state;\n        fetch(`http://www.pengxianghu.com/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                service: 'go.micro.srv.consignment',\n                method: 'ConsignmentService.Create',\n                request: _.omit(consignment, 'created', 'consignments'),\n            }),\n        })\n        .then((res) => res.javascripton())\n        .then((res) => {\n            this.setState({\n                created: res.created,\n                consignments: [...this.state.consignments, consignment],\n            });\n        });\n    }\n\n    addContainer = e => {\n        this.setState({\n            containers: [...this.state.containers, e.target.value],\n        });\n    }\n\n    setDescription = e => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    setWeight = e => {\n        this.setState({\n            weight: Number(e.target.value),\n        });\n    }\n\n    render() {\n        const { consignments, } = this.state;\n        return (\n            <div className='consignment-screen'>\n                <div className='consignment-form container'>\n                    <br />\n                    <div className='form-group'>\n                        <textarea onChange={this.setDescription} className='form-control' placeholder='Description'></textarea>\n                    </div>\n                    <div className='form-group'>\n                        <input onChange={this.setWeight} type='number' placeholder='Weight' className='form-control' />\n                    </div>\n                    <div className='form-control'>\n                        Add containers...\n                    </div>\n                    <br />\n                    <button onClick={this.create} className='btn btn-primary'>Create</button>\n                    <br />\n                    <hr />\n                </div>\n                {(consignments && consignments.length > 0\n                    ? <div className='consignment-list'>\n                            <h2>Consignments</h2>\n                            {consignments.map((item) => (\n                                <div>\n                                    <p>Vessel id: {item.vessel_id}</p>\n                                    <p>Consignment id: {item.id}</p>\n                                    <p>Description: {item.description}</p>\n                                    <p>Weight: {item.weight}</p>\n                                    <hr />\n                                </div>\n                            ))}\n                        </div>\n                    : false)}\n            </div>\n        );\n    }\n}\n\nexport default CreateConsignment;","import React from 'react';\n// import axios from 'axios';\n\nclass Authenticate extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    state = {\n        authenticated: false,\n        email: '',\n        password: '',\n        err: '',\n    }\n\n    login = () => {\n        \n        fetch(`http://www.pengxianghu.com/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                request: {\n                    email: this.state.email,\n                    password: this.state.password,\n                },\n                service: 'go.micro.srv.user',\n                method: 'UserService.Auth',\n            }),\n        })\n        .then(res => res.javascripton())\n        .then(res => {\n            this.props.onAuth(res.token);\n            this.setState({\n                token: res.token,\n                authenticated: true,\n            });\n        })\n        .catch(err => this.setState({ err, authenticated: false, }));\n    }\n\n    signup = () => {\n        fetch(`http://www.pengxianghu.com/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                request: {\n                    email: this.state.email,\n                    password: this.state.password,\n                    name: this.state.name,\n                },\n                method: 'UserService.Create',\n                service: 'go.micro.srv.user',\n            }),\n        })\n        .then((res) => res.javascripton())\n        .then((res) => {\n            this.props.onAuth(res.token.token);\n            this.setState({\n                token: res.token.token,\n                authenticated: true,\n            });\n            localStorage.setItem('token', res.token.token);\n        })\n        .catch(err => this.setState({ err, authenticated: false, }));\n    }\n\n    setEmail = e => {\n        this.setState({\n            email: e.target.value,\n        });\n    }\n\n    setPassword = e => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    setName = e => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <div className='Authenticate'>\n                <div className='Login'>\n                    <div className='form-group'>\n                        <input\n                            type=\"email\"\n                            onChange={this.setEmail}\n                            placeholder='E-Mail'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type=\"password\"\n                            onChange={this.setPassword}\n                            placeholder='Password'\n                            className='form-control' />\n                    </div>\n                    <button className='btn btn-primary' onClick={this.login}>Login</button>\n                    <br /><br />\n                </div>\n                <div className='Sign-up'>\n                    <div className='form-group'>\n                        <input\n                            type='input'\n                            onChange={this.setName}\n                            placeholder='Name'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type='email'\n                            onChange={this.setEmail}\n                            placeholder='E-Mail'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type='password'\n                            onChange={this.setPassword}\n                            placeholder='Password'\n                            className='form-control' />\n                    </div>\n                    <button className='btn btn-primary' onClick={this.signup}>Sign-up</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Authenticate;","import React, { Component } from 'react';\nimport './App.css';\nimport CreateConsignment from './CreateConsignment';\nimport Authenticate from './Authenticate';\n\nclass App extends Component {\n\n    state = {\n        err: null,\n        authenticated: false,\n    }\n\n    onAuth = (token) => {\n        this.setState({\n            authenticated: true,\n        });\n    }\n\n    renderLogin = () => {\n        return (\n            <Authenticate onAuth={this.onAuth} />\n        );\n    }\n\n    renderAuthenticated = () => {\n        return (\n            <CreateConsignment />\n        );\n    }\n\n    getToken = () => {\n        return localStorage.getItem('token') || false;\n    }\n\n    isAuthenticated = () => {\n        return this.state.authenticated || this.getToken() || false;\n    }\n\n    render() {\n        const authenticated = this.isAuthenticated();\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <h2>Shippy</h2>\n                </div>\n                <div className='App-intro container'>\n                    {(authenticated ? this.renderAuthenticated() : this.renderLogin())}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}